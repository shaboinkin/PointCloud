/******************************************************************************************************
 *
 * Basis of OpenGL stuff was created by Vijay Kalivarapu (I think) at Iowa State University
 * for the SPIRE-REU, 2011
 *
 *	Purpose:
 *		Program takes in a .pts file, which is generated by a seperate program from 
 *		Point Grey (not provided...copyright stuff involved I think..either way, I'm not getting sued!)
 *		That program uses a stereo camera (In this case, a BumbleBee2 camera from Point Grey) to scan its
 *		current FOV which then generates data points for each pixel. 
 *
 *		Program takes these data points and creates cubes at the coorisponding x,y,z location and color
 *		resulting in a 3D model/Point cloud thingy
 *
 *		It runs slow due to me not knowing OpenGL stuff. I'll fix it one of these days.
 *
 *		Data from the .pts file is setup as
 *		X	Y	Z	R	G	B	ROW		COL
 *
 *		Where X, Y, Z are 3D coordinates
 *			  R, G, B are red, green, blue
 *			  ROW and COL are the pixel locatations 
 * 
 *      Modifications added in by: Daniel Kulas
 *							  11/7/12
 *******************************************************************************************************/

#include <iostream>
#include <fstream>
#include <vector>
#include <cstring>
#include <sstream>
#include <iterator>
#include <stdlib.h>
#include <stack>

#include "../include/glut.h"
#include "../include/render.h"

using namespace std;

// define width & height of openGL window
#define WIDTH 1000
#define HEIGHT 1000

// Instantiate the render class
Render theApp;

// Define the display function
void myDisplay()
{
	theApp.display();
}

// Define the reshape function
void myReshape(int w, int h)
{
	theApp.reshape(w, h);
}

// Define the mouse click events
void myMouseClick(int button, int state, int x, int y)
{
	theApp.mouseClick(button, state, x, y);
}

// Define the mouse drag events
void myMouseMove(int x, int y)
{
	theApp.mouseMove(x, y);
}

// Define keystroke events
void myKeyStroke(unsigned char key, int x, int y)
{
	theApp.keyPos(key, x, y);
}


// The main function here
int main(int argc, char** argv)
{
	string file;
	cout << "Enter .pts filename" << endl;
	cin >> file;

	// Initialize opengl & glut
	glutInit(&argc, argv);
	
	// Initialize display mode:
	// GLUT_DOUBLE defines double buffering
	// GLUT_RGB defines RGB color mode
	// GLUT_DEPTH defines that the display mode is 3D and depth is required
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

	// Tell opengl how big your window size should be
	glutInitWindowSize(WIDTH, HEIGHT);

	// Tell opengl where on screen does the opengl window need to appear
	glutInitWindowPosition(100, 100);

	// Opengl initialization is over
	// Now tell it to create the opengl window
	int render_window = glutCreateWindow("Super Awesome 3D model pointcloud thingy");

	// init() consists of all the user defined initialization functions & variables
	// example, whether the lighting is enabled, what is the background color, etc
	theApp.init(file);

	//Draw stuff first THEN update

	// tell opengl window to draw the scene that you created
	glutDisplayFunc(myDisplay);

	// specify how window reshape is handled
	glutReshapeFunc(myReshape);
	
	// specify the mouse click events to opengl
	glutMouseFunc(myMouseClick);

	// specify the mouse drag events
	glutMotionFunc(myMouseMove);

	// specify keyboard input events
	glutKeyboardFunc(myKeyStroke);

	// Enter the opengl event processing loop
	// no draw events will be processed without glutMainLoop()
	// do not exit the program... unless the user asks you to
	glutMainLoop();
	return 0;
}
